<project name="Ajax With Ease" default="java-compile" basedir=".">

  <!-- Include property values -->
  <property file="build.properties"/>

  <!-- Java Compile Classpath -->
  <path id="compile.classpath">
    <fileset dir="${lib.dir}" includes="**/*.jar"/>
    <pathelement path="${java.class.path}/"/>
  </path>

  <!-- GWT Compile Classpath -->
  <path id="gwt.compile.classpath">
    <pathelement path="${java.class.path}/"/>
    <pathelement location="${gwt.sdk.location}/gwt-user.jar"/>
    <pathelement location="${gwt.sdk.location}/gwt-dev-windows.jar"/>
    <pathelement location="${src.dir}"/>
  </path>

  <!-- Delete everything this build.xml created -->
  <target     name="clean"
       description="Clean all build directories">
    <delete    dir="${build.dir}"/>
    <delete    dir="${dist.dir}"/>
    <delete    dir="${gwt.entrypoint.class}"/>
  </target>

  <!-- Prep up the tokens -->
  <target     name="init">
    <echo  message="---------- ${project.name} ${project.version} -----------"/>
    <filter  token="implVendor"        value="${project.vendor}"/>
    <filter  token="implVendorId"      value="${project.vendor.id}"/>
    <filter  token="implVersion"       value="${project.version}"/>
    <filter  token="projectName"       value="${project.name}"/>
    <filter  token="projectPackage"    value="${project.package}"/>
    <filter  token="specVendor"        value="${project.spec.vendor}"/>
    <filter  token="specVersion"       value="${project.spec.version}"/>
  </target>

  <!-- Create the folder structure -->
  <target     name="prepare" depends="init">
    <mkdir     dir="${build.dir}"/>
    <mkdir     dir="${build.web.dir}"/>
    <mkdir     dir="${build.web.dir}/META-INF"/>
    <mkdir     dir="${build.web.dir}/WEB-INF"/>
    <mkdir     dir="${build.web.dir}/WEB-INF/classes"/>
    <mkdir     dir="${build.web.dir}/WEB-INF/lib"/>
    <mkdir     dir="${dist.dir}"/>
    <mkdir     dir="${dist.dir}/docs"/>
    <mkdir     dir="${dist.dir}/docs/api"/>
  </target>

  <!-- Copy static files to build. 
       GWT compilation will generate static files so run gwt-compile first-->
  <target     name="static" depends="prepare">

    <!-- Copy and filter configuration files -->
    <copy    todir="${build.dir}/META-INF"
         filtering="on"
              file="${src.conf.dir}/MANIFEST.MF"/>

    <!-- Copy static web resources -->
    <copy    todir="${build.web.dir}"
         filtering="on">
      <fileset dir="${src.web.dir}"/>
    </copy>

    <!-- Copy libraries from "lib.dir" directory -->
    <copy    todir="${build.web.dir}/WEB-INF/lib"
           flatten="true">
      <fileset dir="${lib.dir}"
          includes="**/*.jar">
      </fileset>
    </copy>
  </target>

  <!-- AJAX Compilation with GWT -->
  <target name="gwt-compile" depends="static">
        <java classpathref="gwt.compile.classpath"
                classname="com.google.gwt.dev.GWTCompiler"
                fork="true">
                <arg value="-out"/>
                <arg value="${build.dir}"/>
                <arg value="${gwt.entrypoint.class}"/>
        </java>
    </target> 
	
	  <target name="gwt-copy" depends="gwt-compile">
	    <copy    todir="${build.web.dir}">
	      <fileset dir="${build.dir}/${gwt.entrypoint.class}"
	      			includes= "*">
	      	
	      </fileset>
	    </copy>
	  </target>
	
	<!-- compile files needed for RPC processing -->
	<target  name="java-compile" depends="gwt-copy"
	         description="Compile application components">

	    <!-- Compile AJAX Java Sources -->
	    <javac      srcdir="${src.dir}"
	               destdir="${build.web.dir}/WEB-INF/classes"
	                 debug="${compile.debug}"
	           deprecation="${compile.deprecation}"
	              optimize="${compile.optimize}"
	                source="${project.source}"
	                target="${project.target}">
	      <classpath refid="gwt.compile.classpath" />
	    </javac>
	</target>
		
  <!-- Generate Documentation -->
  <target  name="javadocs" depends="java-compile"
           description="Create JavaDocs">
    <mkdir         dir="${build.docs.dir}"/>
    <javadoc
               destdir="${build.docs.dir}"
                author="false"
               private="true"
               version="true"
                source="${project.source}"
          packagenames="${project.package}.*"
           windowtitle="${project.name} (Version ${project.version})"
              doctitle="${project.name} (Version ${project.version})"
                bottom="${project.copyright}">
      <sourcepath path="${src.dir}"/>
      <classpath refid="compile.classpath"/>
      <classpath refid="gwt.compile.classpath"/>
    </javadoc>

    <copy        todir="${build.docs.dir}">
      <fileset     dir="${src.dir}"
              includes="**/*.gif"/>
    </copy>
  </target>

  <!-- Create Binary Distribution -->
  <target name="dist" depends="javadocs"
   description="Create binary distribution">

    <mkdir     dir="${dist.dir}"/>

    <!-- Copy license and configuration files -->
    <copy    todir="${dist.dir}">
      <fileset dir="${basedir}" includes="*.txt build.*"/>
    </copy>

    <!-- Create a runnable web application archive -->
    <jar   jarfile="${dist.dir}/${project.path}-${project.version}.war"
           basedir="${build.web.dir}"
          manifest="${build.dir}/META-INF/MANIFEST.MF"/>

    <!-- Optional:  Copy the source directories -->
    <mkdir     dir="${dist.dir}/src"/>
    <copy    todir="${dist.dir}/src">
      <fileset dir="src" excludes="**/.svn/** **/CVS/**"/>
    </copy>

    <!-- Optional:  Create an IDE-friendly zip of the Java sources -->
    <zip    zipfile="${dist.dir}/${project.path}-${project.version}-src.zip"
            basedir="${dist.dir}/src"/>

    <!-- Copy unpacked javadocs -->
    <mkdir      dir="${dist.dir}/docs"/>
    <mkdir      dir="${dist.dir}/docs/api"/>
    <copy     todir="${dist.dir}/docs/api">
      <fileset  dir="${build.docs.dir}"/>
    </copy>

    <!-- Create an IDE-friendly zip of the Javadocs -->
    <zip    zipfile="${dist.dir}/${project.path}-${project.version}-doc.zip"
            basedir="${build.docs.dir}"/>
	</target>
		
  <target name="deploy" depends="dist">
    <copy   todir="${tomcat.webapps}" 
    		file="${dist.dir}/${project.path}-${project.version}.war" />
  </target>	
</project>
